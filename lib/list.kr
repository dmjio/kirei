let reverse list =
  let rev l acc = case l of
    Empty -> acc
  | Cons a as -> rev as (Cons a acc);
  rev list Empty;

let plusplus list1 list2 = case list1 of
  Empty -> list2
| Cons a as -> Cons a (as ++ list2);

let joinBy sep listOfLists = case listOfLists of
  Empty -> Empty
| Cons a as -> Cons a (Cons sep (joinBy sep as));

let single a = Cons a Empty;

let map f list = case list of
  Empty -> Empty
| Cons a lst -> Cons (f a) (map f lst);

let render list =
  (single "[") ++ ((joinBy "," list) ++ (single "]"));

let tildegt f g = \x -> g (f x);
let bang x f = f x;

let fromRange stop start =
  let step = if stop > start then \a -> a-1 else (+1);
  let stopTest = if stop > start then <= else >=;
  let loop a b acc = if stopTest a b then acc
    else loop (step a) b (Cons a acc);
  (loop stop start Empty) ! reverse;

map (*7) (fromRange 1 30) ! std.printList,

printLn (defaultShow (fromRange 1 30)) $IO;
